Using 101-lazy_matrix_mul.py
============================

This involves a module that has a function that leads to the multiplication of two matrices

::

	>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
	>>> m_a = [
	... [2, 5],
	... [3, 4],
	... ]
	>>> m_b = m_a
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[19 30]
	 [18 31]]

::

	>>> m_a = [[3, 4]]
	>>> m_b = [
	... [3, 8],
	... [2, 6]
	... ]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[17 48]]

Working with floats

::

	>>> m_a = [
	... [5.2, 3.4, 2.1],
	... [3.22, -11.3, 1.2]
	... ]
	>>> m_b = [
	... [3.0, 3.3],
	... [2.3, -8.1],
	... [4.2, 2.2]
	... ]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[ 32.24   -5.76 ]
 	 [-11.29  104.796]]

Two arguements m_a and m_b have to be provided for the function to work

::

	>>> print(lazy_matrix_mul(m_a))
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

::


	>>> print(lazy_matrix_mul())
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

when the rows of m_a are not equal to the columns of m_b ValueError is raised

::

	>>> m_a = [
	... [8, 2],
	... [6, 7],
	... ]
	>>> m_b = [
	... [7, 0],
	... [4, 4],
	... [4, 1]
	... ]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

when the parameters of m_b or m_a are empty ValueError is raised

::

	>>> print(lazy_matrix_mul([[]], [[7, 3], [9, 0]]))
	Traceback (most recent call last):
	ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

::

	>>> print(lazy_matrix_mul([[5, 2], [3, 9]], [[]]))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)


The m_a and m_b 's have to be lists

::

	>>> print(lazy_matrix_mul("Rosemary", [[2, 9]]))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead

::

	>>> print(lazy_matrix_mul("luck", "favour"))	
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead

::


	>>> print(lazy_matrix_mul([[8, 0]], "belief"))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead

if m_a or m_b is None

::

	>>> print(lazy_matrix_mul(None, None))
	Traceback (most recent call last):
	TypeError: Object arrays are not currently supported

lists within lists have to be used

::

	>>> print(lazy_matrix_mul([[4, 1]], [2, 0]))
	[8]

::

	>>> print(lazy_matrix_mul([1, 2], [3, 4]))
	11

::


	>>> print(lazy_matrix_mul([3, 1], [[6, 4]]))
	Traceback (most recent call last):
	ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

The list of lists have to contain either floats or lists

::

	>>> print(lazy_matrix_mul([[2, 4], ["7", 0]], [[2, "1"]]))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

::

	>>> print(lazy_matrix_mul([["safety"]], [[2, 1]]))
	Traceback (most recent call last):
	TypeError: invalid data type for einsum

::

	>>> print(lazy_matrix_mul([["rolling"]], [[{"x": 3}, 8]]))
	Traceback (most recent call last):
	TypeError: Object arrays are not currently supported

The length of the rows in m_a and m_b should be the same

::

	>>> m_a = [
	... [2, 1],
	... [3, 7]
	... ]
	>>> m_b = [
	... [1, 8],
 	... [9, 3, 2]
	... ]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.

::

	>>> m_a = [
	... [2, 7],
	... [3, 6, 5]
	... ]
	>>> m_b = [
	... [1, 7],
	... [1, 9]
	... ]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.

::

	>>> m_b = [
	... [1, 2],
	... [3, 4, 5]
	... ]
	>>> m_b = m_a
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.
